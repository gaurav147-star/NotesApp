{"ast":null,"code":"var _jsxFileName = \"/home/gauravg/Documents/github/NotesApp/client/src/context/notes/NoteState.js\",\n    _s = $RefreshSig$();\n\nimport NoteContext from \"./NoteContext\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nrequire(\"dotenv\").config();\n\nconst NoteState = props => {\n  _s();\n\n  const host = process.env.REACT_APP_HOST_KEY; // const host = \"http://localhost:5000\";\n\n  const notesInitial = [];\n  const [notes, setNotes] = useState(notesInitial); // Get all Notes\n\n  const getNotes = async () => {\n    // API Call\n    const response = await fetch(`${host}/api/notes/fetchallnotes`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": localStorage.getItem(\"token\")\n      }\n    });\n    const json = await response.json(); // console.log(json);\n\n    setNotes(json);\n  }; // Add a Note\n\n\n  const addNote = async (title, description, tag) => {\n    // TODO: API Call\n    // API Call\n    const response = await fetch(`${host}/api/notes/addnotes`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": localStorage.getItem(\"token\")\n      },\n      body: JSON.stringify({\n        title,\n        description,\n        tag\n      })\n    });\n    const json = await response.json();\n    setNotes(notes.concat(json)); // console.log(\"Adding a new note\");\n    // const note = {\n    //   title: title,\n    //   description: description,\n    //   tag: tag,\n    // };\n    // setNotes(notes.concat(note));\n  }; // Delete a Note\n\n\n  const deleteNote = async id => {\n    // TODO: API Call\n    const response = await fetch(`${host}/api/notes/deletenote/${id}`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": localStorage.getItem(\"token\")\n      }\n    });\n    const json = response.json(); // console.log(json);\n    // console.log(\"Deleting the note with id\" + id);\n\n    const newNotes = notes.filter(note => {\n      return note._id !== id;\n    });\n    setNotes(newNotes);\n  }; // Edit a Note\n\n\n  const editNote = async (id, title, description, tag) => {\n    // API Call\n    const response = await fetch(`${host}/api/notes/updatenote/${id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": localStorage.getItem(\"token\")\n      },\n      body: JSON.stringify({\n        title,\n        description,\n        tag\n      })\n    }); // const json = response.json();\n\n    const json = response.json(); // console.log(json);\n\n    let newNotes = JSON.parse(JSON.stringify(notes)); // Logic to edit in client\n\n    for (let index = 0; index < newNotes.length; index++) {\n      const element = newNotes[index];\n\n      if (element._id === id) {\n        newNotes[index].title = title;\n        newNotes[index].description = description;\n        newNotes[index].tag = tag;\n      }\n    }\n\n    setNotes(newNotes);\n  };\n\n  return /*#__PURE__*/_jsxDEV(NoteContext.Provider, {\n    value: {\n      notes,\n      addNote,\n      deleteNote,\n      editNote,\n      getNotes\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n};\n\n_s(NoteState, \"hccfwx9qLG83YV7VqgUOSPmOD6I=\");\n\n_c = NoteState;\nexport default NoteState;\n\nvar _c;\n\n$RefreshReg$(_c, \"NoteState\");","map":{"version":3,"names":["NoteContext","useState","require","config","NoteState","props","host","process","env","REACT_APP_HOST_KEY","notesInitial","notes","setNotes","getNotes","response","fetch","method","headers","localStorage","getItem","json","addNote","title","description","tag","body","JSON","stringify","concat","deleteNote","id","newNotes","filter","note","_id","editNote","parse","index","length","element","children"],"sources":["/home/gauravg/Documents/github/NotesApp/client/src/context/notes/NoteState.js"],"sourcesContent":["import NoteContext from \"./NoteContext\";\r\nimport { useState } from \"react\";\r\nrequire(\"dotenv\").config();\r\nconst NoteState = (props) => {\r\n\r\n  \r\n  const host = process.env.REACT_APP_HOST_KEY;\r\n  // const host = \"http://localhost:5000\";\r\n  const notesInitial = [];\r\n  const [notes, setNotes] = useState(notesInitial);\r\n\r\n  // Get all Notes\r\n  const getNotes = async () => {\r\n    // API Call\r\n    const response = await fetch(`${host}/api/notes/fetchallnotes`, {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"auth-token\": localStorage.getItem(\"token\"),\r\n      },\r\n    });\r\n    const json = await response.json();\r\n    // console.log(json);\r\n    setNotes(json);\r\n  };\r\n\r\n  // Add a Note\r\n  const addNote = async (title, description, tag) => {\r\n    // TODO: API Call\r\n    // API Call\r\n    const response = await fetch(`${host}/api/notes/addnotes`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"auth-token\": localStorage.getItem(\"token\"),\r\n      },\r\n      body: JSON.stringify({ title, description, tag }),\r\n    });\r\n    const json = await response.json();\r\n    setNotes(notes.concat(json));\r\n    // console.log(\"Adding a new note\");\r\n    // const note = {\r\n    //   title: title,\r\n    //   description: description,\r\n    //   tag: tag,\r\n    // };\r\n    // setNotes(notes.concat(note));\r\n  };\r\n\r\n  // Delete a Note\r\n  const deleteNote = async (id) => {\r\n    // TODO: API Call\r\n    const response = await fetch(`${host}/api/notes/deletenote/${id}`, {\r\n      method: \"DELETE\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"auth-token\": localStorage.getItem(\"token\"),\r\n      },\r\n    });\r\n    const json = response.json();\r\n    // console.log(json);\r\n\r\n    // console.log(\"Deleting the note with id\" + id);\r\n    const newNotes = notes.filter((note) => {\r\n      return note._id !== id;\r\n    });\r\n    setNotes(newNotes);\r\n  };\r\n  // Edit a Note\r\n  const editNote = async (id, title, description, tag) => {\r\n    // API Call\r\n    const response = await fetch(`${host}/api/notes/updatenote/${id}`, {\r\n      method: \"PUT\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"auth-token\": localStorage.getItem(\"token\"),\r\n      },\r\n      body: JSON.stringify({ title, description, tag }),\r\n    });\r\n    // const json = response.json();\r\n    const json = response.json();\r\n    // console.log(json);\r\n    let newNotes = JSON.parse(JSON.stringify(notes));\r\n\r\n    // Logic to edit in client\r\n    for (let index = 0; index < newNotes.length; index++) {\r\n      const element = newNotes[index];\r\n      if (element._id === id) {\r\n        newNotes[index].title = title;\r\n        newNotes[index].description = description;\r\n        newNotes[index].tag = tag;\r\n      }\r\n    }\r\n    setNotes(newNotes);\r\n  };\r\n\r\n  return (\r\n    <NoteContext.Provider\r\n      value={{ notes, addNote, deleteNote, editNote, getNotes }}\r\n    >\r\n      {props.children}\r\n    </NoteContext.Provider>\r\n  );\r\n};\r\nexport default NoteState;\r\n"],"mappings":";;;AAAA,OAAOA,WAAP,MAAwB,eAAxB;AACA,SAASC,QAAT,QAAyB,OAAzB;;;AACAC,OAAO,CAAC,QAAD,CAAP,CAAkBC,MAAlB;;AACA,MAAMC,SAAS,GAAIC,KAAD,IAAW;EAAA;;EAG3B,MAAMC,IAAI,GAAGC,OAAO,CAACC,GAAR,CAAYC,kBAAzB,CAH2B,CAI3B;;EACA,MAAMC,YAAY,GAAG,EAArB;EACA,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAACS,YAAD,CAAlC,CAN2B,CAQ3B;;EACA,MAAMG,QAAQ,GAAG,YAAY;IAC3B;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAET,IAAK,0BAAT,EAAoC;MAC9DU,MAAM,EAAE,KADsD;MAE9DC,OAAO,EAAE;QACP,gBAAgB,kBADT;QAEP,cAAcC,YAAY,CAACC,OAAb,CAAqB,OAArB;MAFP;IAFqD,CAApC,CAA5B;IAOA,MAAMC,IAAI,GAAG,MAAMN,QAAQ,CAACM,IAAT,EAAnB,CAT2B,CAU3B;;IACAR,QAAQ,CAACQ,IAAD,CAAR;EACD,CAZD,CAT2B,CAuB3B;;;EACA,MAAMC,OAAO,GAAG,OAAOC,KAAP,EAAcC,WAAd,EAA2BC,GAA3B,KAAmC;IACjD;IACA;IACA,MAAMV,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAET,IAAK,qBAAT,EAA+B;MACzDU,MAAM,EAAE,MADiD;MAEzDC,OAAO,EAAE;QACP,gBAAgB,kBADT;QAEP,cAAcC,YAAY,CAACC,OAAb,CAAqB,OAArB;MAFP,CAFgD;MAMzDM,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;QAAEL,KAAF;QAASC,WAAT;QAAsBC;MAAtB,CAAf;IANmD,CAA/B,CAA5B;IAQA,MAAMJ,IAAI,GAAG,MAAMN,QAAQ,CAACM,IAAT,EAAnB;IACAR,QAAQ,CAACD,KAAK,CAACiB,MAAN,CAAaR,IAAb,CAAD,CAAR,CAZiD,CAajD;IACA;IACA;IACA;IACA;IACA;IACA;EACD,CApBD,CAxB2B,CA8C3B;;;EACA,MAAMS,UAAU,GAAG,MAAOC,EAAP,IAAc;IAC/B;IACA,MAAMhB,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAET,IAAK,yBAAwBwB,EAAG,EAApC,EAAuC;MACjEd,MAAM,EAAE,QADyD;MAEjEC,OAAO,EAAE;QACP,gBAAgB,kBADT;QAEP,cAAcC,YAAY,CAACC,OAAb,CAAqB,OAArB;MAFP;IAFwD,CAAvC,CAA5B;IAOA,MAAMC,IAAI,GAAGN,QAAQ,CAACM,IAAT,EAAb,CAT+B,CAU/B;IAEA;;IACA,MAAMW,QAAQ,GAAGpB,KAAK,CAACqB,MAAN,CAAcC,IAAD,IAAU;MACtC,OAAOA,IAAI,CAACC,GAAL,KAAaJ,EAApB;IACD,CAFgB,CAAjB;IAGAlB,QAAQ,CAACmB,QAAD,CAAR;EACD,CAjBD,CA/C2B,CAiE3B;;;EACA,MAAMI,QAAQ,GAAG,OAAOL,EAAP,EAAWR,KAAX,EAAkBC,WAAlB,EAA+BC,GAA/B,KAAuC;IACtD;IACA,MAAMV,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAET,IAAK,yBAAwBwB,EAAG,EAApC,EAAuC;MACjEd,MAAM,EAAE,KADyD;MAEjEC,OAAO,EAAE;QACP,gBAAgB,kBADT;QAEP,cAAcC,YAAY,CAACC,OAAb,CAAqB,OAArB;MAFP,CAFwD;MAMjEM,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;QAAEL,KAAF;QAASC,WAAT;QAAsBC;MAAtB,CAAf;IAN2D,CAAvC,CAA5B,CAFsD,CAUtD;;IACA,MAAMJ,IAAI,GAAGN,QAAQ,CAACM,IAAT,EAAb,CAXsD,CAYtD;;IACA,IAAIW,QAAQ,GAAGL,IAAI,CAACU,KAAL,CAAWV,IAAI,CAACC,SAAL,CAAehB,KAAf,CAAX,CAAf,CAbsD,CAetD;;IACA,KAAK,IAAI0B,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGN,QAAQ,CAACO,MAArC,EAA6CD,KAAK,EAAlD,EAAsD;MACpD,MAAME,OAAO,GAAGR,QAAQ,CAACM,KAAD,CAAxB;;MACA,IAAIE,OAAO,CAACL,GAAR,KAAgBJ,EAApB,EAAwB;QACtBC,QAAQ,CAACM,KAAD,CAAR,CAAgBf,KAAhB,GAAwBA,KAAxB;QACAS,QAAQ,CAACM,KAAD,CAAR,CAAgBd,WAAhB,GAA8BA,WAA9B;QACAQ,QAAQ,CAACM,KAAD,CAAR,CAAgBb,GAAhB,GAAsBA,GAAtB;MACD;IACF;;IACDZ,QAAQ,CAACmB,QAAD,CAAR;EACD,CAzBD;;EA2BA,oBACE,QAAC,WAAD,CAAa,QAAb;IACE,KAAK,EAAE;MAAEpB,KAAF;MAASU,OAAT;MAAkBQ,UAAlB;MAA8BM,QAA9B;MAAwCtB;IAAxC,CADT;IAAA,UAGGR,KAAK,CAACmC;EAHT;IAAA;IAAA;IAAA;EAAA,QADF;AAOD,CApGD;;GAAMpC,S;;KAAAA,S;AAqGN,eAAeA,SAAf"},"metadata":{},"sourceType":"module"}